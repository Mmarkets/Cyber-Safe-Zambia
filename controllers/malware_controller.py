import requests
from config import Config
from werkzeug.utils import secure_filename
from flask_login import current_user
from models import db, ScanHistory
import logging
import time

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'zip', 'doc', 'docx'}
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def scan_file(file):
    if not file or not file.filename:
        return {'status': 'No file uploaded', 'category': 'danger'}
    if not allowed_file(file.filename):
        return {'status': 'Invalid file type. Allowed: txt, pdf, zip, doc, docx', 'category': 'danger'}
    if file.content_length > MAX_FILE_SIZE:
        return {'status': 'File too large. Max size: 5MB', 'category': 'danger'}
    try:
        files = {'file': (secure_filename(file.filename), file)}
        headers = {'x-apikey': Config.VIRUSTOTAL_API_KEY}
        response = requests.post('https://www.virustotal.com/api/v3/files', files=files, headers=headers)
        response.raise_for_status()
        data = response.json()
        analysis_id = data['data']['id']
           # Poll for analysis results
        for _ in range(5):  # Try up to 5 times
            analysis_response = requests.get(f'https://www.virustotal.com/api/v3/analyses/{analysis_id}', headers=headers)
            analysis_response.raise_for_status()
            analysis_data = analysis_response.json()
            status = analysis_data['data']['attributes']['status']
            if status == 'completed':
                positives = analysis_data['data']['attributes']['stats']['malicious']
                result = {'status': 'Malware Detected' if positives > 0 else 'File is Clean', 'category': 'danger' if positives > 0 else 'success'}
                   # Log scan history for authenticated users
                if current_user.is_authenticated:
                    scan = ScanHistory(
                        user_id=current_user.id,
                        tool_name='malware_scanner',
                        input_data=secure_filename(file.filename)[:255],
                        result=result['status']
                    )
                    db.session.add(scan)
                    db.session.commit()
                return result
            time.sleep(2)  # Wait 2 seconds before retrying
        return {'status': 'Analysis timeout. Try again later.', 'category': 'danger'}
    except Exception as e:
        logging.error(f"Malware scan error: {str(e)}")
        return {'status': f'Error: {str(e)}', 'category': 'danger'}